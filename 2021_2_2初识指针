////指针运算--指针+/-整数
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	int *p = arr;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d\n", *p);
//		p++;
//	}
//	return 0;
//}——1

//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char ch[] = "bit";
//	char ch1[] = { 'b','i','t' };
//
//	int a = strlen(ch);//--3
//	int a1 = sizeof(ch);//--4
//	printf("%d %d\n", a, a1);
//
//	int b = strlen(ch1);//--15（随机值）
//	int b1 = sizeof(ch1);//--3
//	printf("%d %d\n", b, b1);
//
//	return 0;
//}——2

//#include<stdio.h>
//#define N_VALUES 5
//int main()
//{
//	float values[N_VALUES];
//	float*vp;
//	//指针关系运算
//	for (vp = &values[0]; vp < &values[N_VALUES];)
//	{
//		*vp++ = 0;
//	}
//}——3

////指针运算--指针-指针
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	printf("%d\n", &arr[9] - &arr[0]);//arr[0]-arr[9]之间的元素个数（大-小）
//	return 0;
//}——4

////模拟实现strlen（指针-指针）
//#include<stdio.h>
//int my_strlen(char*str)
//{
//	char*start = str;
//	char*end = str;
//	while (*end != '\0')
//	{
//		end++;
//	}
//	return end - start;
//}
//int main()
//{
//	char arr[] = "bit";
//	int len = my_strlen(arr);
//	printf("%d\n", len);
//	return 0;
//}——5

//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 0 };
//	int*p = arr;
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		*(p + i) = i;
//	}
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d",*(p+i));
//		printf(" %d\n", arr[i]);
//	}
//	printf("\n");
//	for (i = 0; i < 10; i++)
//	{
//		printf("%p============%p\n",p+i,&arr[i]);//指针不同表达方式
//	}
//	return 0;
//}——6

////二级指针
//#include<stdio.h>
//int main()
//{
//	int a = 10;
//	int*pa = &a;
//	int**ppa = &pa;
//	printf("%d\n", **ppa);
//	**ppa = 20;
//	printf("%d\n", a);
//	return 0;
//}——7

//#include<stdio.h>
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = 30;
//	int*arr[] = { &a,&b,&c };
//	int i;
//	for (i = 0; i < 3; i++)
//	{
//		printf("%d\n", *(arr[i]));
//	}
//	printf("\n");
//}——8
