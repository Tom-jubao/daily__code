////求一个数二进制（补码）中1的个数
//#include<stdio.h>
//////法1--低级
////int count_bit_one(unsigned int n)//为避免负数出错，改为无符号型
////{
////	int count = 0;
////	while (n)
////	{
////		if (n % 2 == 1)//看最后一位是否为1
////		{
////			count++;
////		}
////		n = n / 2;//删去最后一位
////	}
////	return count;
////}
//
//////法2--中级
////int count_bit_one(int n)
////{
////	int i = 0;
////	int count = 0;
////	for (i; i < 32; i++)
////	{
////		if (((n >> i) & 1) == 1)//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx--依次右移一位
////		{                       //00000000000000000000000000000001 
////			count++;
////		}
////	}
////	return count;
////}
//
//////法3--高级                   //设n为13--1101      
////int count_bit_one(int n)      //n--1101  &  (n-1)--1100
////{                             //n--1100  &  (n-1)--1011
////	int count = 0;            //n--1000  &  (n-1)--0111   
////	while (n)                 //n--0000
////	{
////		n = n & (n - 1);
////		count++;
////	}
////	return count;
////}
//
//int main()
//{
//	int a;
//	scanf_s("%d", &a);
//	int count = count_bit_one(a);
//	printf("%d\n", count);
//	return 0;
//}——1

////求两个数二进制中的不同位个数   例：13--1101  15--1111
//#include<stdio.h>                  //输出：1
//int get_diff_bit(int m, int n)
//{
//	int count = 0;
//	int tmp = m ^ n;
//	while (tmp)
//	{
//		tmp = tmp & (tmp - 1);
//		count++;
//	}
//	return count;
//}
//
//int main()
//{
//	int m=0, n=0;
//	scanf_s("%d%d", &m, &n);
//	int count = get_diff_bit(m, n);
//	printf("%d\n", count);
//	return 0;
//}——2

////获取一个整数二进制序列中所有的偶数位与奇数位，分别打印
//#include<sdtio.h>
//void print(int m)
//{
//	int i = 0;
//	printf("奇数位\n");
//	for (i = 31; i >= 1; i -= 2)    //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
//	{                               //> >>  >>>   >>>>    >>>>>     >>
//		printf("%d ", (m >> i) & 1);
//	}
//	printf("\n");
//	printf("偶数位\n");
//	for (i = 30;i >= 0; i -= 2)
//	{
//		printf("%d ", (m >> i) & 1);
//	}
//	printf("\n");
//}
//int main()
//{
//	int m = 0;
//	scanf_s("%d", &m);
//	print(m);
//	return 0;
//}——3

////指针打印数组
//#include<stdio.h>
//void print(int*p, int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", *(p + i));
//	}
//}
//
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	print(arr, sz);
//	printf("\n");
//	return 0;
//}——4

////一道解答递归函数返回值的题
//#include<stdio.h>
//int Fun(int n)
//{
//	if (n == 5)
//		return 2;
//	else
//		return 2 * Fun(n++);
//}
//int main()
//{
//	int n = 2;
//	int i = Fun(n);
//	printf("%d\n", i);
//	return 0;
//}——5

////打印n*n乘法口诀表
//#include<stdio.h>
//void print_table(int n)
//{
//	int i = 0;
//	for (i = 1; i <= n; i++)
//	{
//		int j = 0;
//		for (j = 1; j <= i; j++)
//		{
//			printf("%d*%d=%-2d ", i, j, i*j);
//		}
//		printf("\n");
//	}
//}
//
//int main()
//{
//	int n = 0;
//	scanf_s("%d", &n);
//	print_table(n);
//	printf("\n");
//	return 0;
//}——6
