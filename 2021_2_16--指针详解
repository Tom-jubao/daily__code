//#include<stdio.h>
//void test(int arr[])
//{
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//arr--首元素地址--4个字节
//	printf("%d\n", sz);
//  //32位--1
//  //64位--2
//}
//
//int main()
//{
//	int arr[10] = { 0 };
//	test(arr);
//	return 0;
//}——1

//#include<stdio.h>
//int main()
//{
//	char arr[] = "abcdef";
//	char*pc = arr;
//	printf("%s\n", arr);//abcdef
//	printf("%s\n", pc);//abcdef
//	return 0;
//}——2

//#include<stdio.h>
//int main()
//{
//	char*p = "abcdef";
//	//p--首字符地址
//	//"abcdef"是一个常量字符串，不可修改，则若*p='W',系统出错，无法改变
//	printf("%c\n", *p);//a
//	printf("%s\n", p);//abcdef
//	return 0;
//}——3

////一道面试题
////情景一：
//#include<stdio.h>
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "abcdef";
//	//arr1与arr2两个数组所存地址不同，首字母地址也各不相同
//
//	/*(const)*/char*p1 = "abcdef";//常量字符串
//	/*(const)*/char*p2 = "abcdef";//常量字符串
//	           //对p1,p2来说，"abcdef"为常量字符串，则只存一份，故p1,p2均指向首字母地址
//	if (arr1==arr2)
//	{
//		printf("hehe\n");
//	}
//	else
//	{
//		printf("haha\n");
//	}
//	return 0;
//	//由于arr1，arr2首字母地址不同，输出 --> haha
//}

////情景二：
//#include<stdio.h>
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "abcdef";
//	//arr1与arr2两个数组所存地址不同，首字母地址也各不相同
//
//	/*(const)*/char*p1 = "abcdef";//常量字符串
//	/*(const)*/char*p2 = "abcdef";//常量字符串
//	           //对p1,p2来说，"abcdef"为常量字符串，则只存一份，故p1,p2均指向首字母地址
//	if (p1==p2)
//	{
//		printf("hehe\n");
//	}
//	else
//	{
//		printf("haha\n");
//	}
//	return 0;
//	//由于p1,p2指向同一个常量字符串，故首地址相同。输出 --> hehe
//}——4

////指针数组是数组，用来存指针
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 0 };//整型数组
//	char ch[5] = { 0 };//字符数组
//	int*parr[4];//存放整形指针的数组--指针数组
//	char*pch[5];//存放字符指针的数组--指针数组
//}——5

//#include<stdio.h>
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = 30;
//	int d = 40;
//	int*arr[4] = { &a,&b,&c,&d };//指针数组存指针
//	//监视 &a,&b,&c,&d 与 arr ，查看内存地址情况
//	return 0;
//}——6

//#include<stdio.h>
//int main()
//{
//	int arr1[] = { 1,2,3,4,5 };
//	int arr2[] = { 2,3,4,5,6 };
//	int arr3[] = { 3,4,5,6,7 };
//	int*parr[] = { arr1,arr2,arr3 };
//
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 5; j++)
//		{
//			printf("%d ", *(parr[i] + j));
//		}
//		printf("\n");
//	}
//	return 0;
//}
