////快捷键使用（F5,F9,F10,F11）
//#include<stdio.h>
//int Add(int x, int y)
//{
//	return x + y;
//}
//
//int main()
//{
//	printf("hehe\n");
//	int a = 10;
//	int b = 20;
//	int c = Add(a, b);
//	printf("%d\n", c);
//	return 0;
//}——1

////调试代码一：
////求1！+2！+3！+.....+n!
//
////未调试修改前
//#include<stdio.h>
//int main()
//{
//	int i = 0;
//	int sum = 0;//保存最终结果
//	int n = 0;
//	int ret = 1;//保存n！
//	scanf_s("%d", &n);
//	for (i = 1; i <= n; i++)
//	{
//		int j = 0;
//		for (j = 1; j <= i; j++)
//		{
//			ret *= j;
//		}
//		sum += ret;
//	}
//	printf("%d的阶乘为:>%d\n", n, sum);
//	return 0;
//}
//
////(n=3)经调试，发现问题存在ret,第三次ret应为1，却为2，则修改如下：
////经调试后修改后
//#include<stdio.h>
//int main()
//{
//	int i = 0;
//	int sum = 0;//保存最终结果
//	int n = 0;
//	scanf_s("%d", &n);
//	for (i = 1; i <= n; i++)
//	{
//		int j = 0;
//		int ret = 1;//保存n！
//		for (j = 1; j <= i; j++)
//		{
//			ret *= j;
//		}
//		sum += ret;
//	}
//	printf("%d的阶乘为:>%d\n", n, sum);
//	return 0;
//}——2

////调试代码二：
////一道死循环的代码
//
////未调试修改前
//#include<stdio.h>
//int main()
//{
//	int i = 0;
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	for (i = 0; i <= 12; i++)
//	{
//		printf("hehe\n");
//		arr[i] = 0;
//	}
//	system("pause");
//	return 0;
//}
//
////i=10,11,12时，arr[i]非法访问，尤其i=12时，i为0,推出arr[12]与i地址相同，同一空间
////经调试修改后
////第一种
// #include<stdio.h>
//int main()
//{
//	int i = 0;
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	for (i = 0; i <= 9; i++)
//	{
//		printf("hehe\n");
//		arr[i] = 0;
//	}
//	system("pause");
//	return 0;
//}
//
////第二种
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	for (i = 0; i <= 12; i++)
//	{
//		printf("hehe\n");
//		arr[i] = 0;
//	}
//	system("pause");
//	return 0;
//}——3

//代码实现strcpy
//
////初始版本
////满分：10  得分:6
//
//#include<stdio.h>
//void my_strcpy(char*dest, char*src)
//{
//	while (*src != '\0')
//	{
//		*dest = *src;
//		src++;
//		dest++;
//	}
//	*dest = *src;
//}
//
//int main()
//{
//	char arr1[] = "#######################";
//	char arr2[] = "bit";
//	my_strcpy(arr1, arr2);
//	printf("%s\n", arr1);
//	return 0;
//}

////优化1：
////满分：10   得分：6
//
//#include<stdio.h>
//void my_strcpy(char*dest, char*src)
//{
//	while (*src != '\0')
//	{
//		*dest++ = *src++;
//	}
//	*dest = *src;
//}
//
//int main()
//{
//	char arr1[] = "#######################";
//	char arr2[] = "bit";
//	my_strcpy(arr1, arr2);
//	printf("%s\n", arr1);
//	return 0;
//}

////优化2：
////满分：10   得分：7
//
//#include<stdio.h>
//void my_strcpy(char*dest, char*src)
//{
//	while (*dest++ = *src++)
//	{
//		;
//	}
//}
//
//int main()
//{
//	char arr1[] = "#######################";
//	char arr2[] = "bit";
//	my_strcpy(arr1, arr2);
//	printf("%s\n", arr1);
//	return 0;
//}.

////由于可能存在空指针
////若my_strcpy(arr1,NULL),出问题
//
////优化3：（不易发现问题，直接规避）：
////出现错误
//
//#include<stdio.h>
//void my_strcpy(char*dest, char*src)
//{
//	if (dest!=NULL&&src!=NULL) 
//	{
//		while (*dest++ = *src++)
//		{
//			;
//		}
//	}
//}
//
//int main()
//{
//	char arr1[] = "####################";
//	char arr2[] = "bit";
//	my_strcpy(arr1, NULL);
//	printf("%s\n", arr1);
//		return 0;
//}

////优化3：
////满分：10   得分：8
//
//#include<stdio.h>
//#include<assert.h>
//void my_strcpy(char*dest, char*src)
//{
//	assert(dest != NULL);
//	assert(src != NULL);
//		   while (*dest++ = *src++)
//		   {
//			   ;
//		   }
//}
//
//int main()
//{
//	char arr1[] = "#######################";
//	char arr2[] = "bit";
//	my_strcpy(arr1, arr2);
//	printf("%s\n", arr1);
//	return 0;
//}

////优化4：
////满分：10   得分：9
//
//#include<stdio.h>
//#include<assert.h>
//void my_strcpy(char*dest, const char*src)
//{
//	assert(dest != NULL);
//	assert(src != NULL);
//	while (*dest++ = *src++)
//	{
//		;
//	}
//}
//
//int main()
//{
//	char arr1[] = "#######################";
//	char arr2[] = "bit";
//	my_strcpy(arr1, arr2);
//	printf("%s\n", arr1);
//	return 0;
//}

////优化5：
////满分：10   得分：10
//
//#include<stdio.h>
//#include<assert.h>
//char*my_strcpy(char*dest, const char*src)
//{
// assert(dest != NULL);
//  assert(src != NULL);
//  while (*dest++ = *src++)
//  {
//  
//	  ;
//  }
//}
//
//int main()
//{
//	char arr1[] = "#######################";
//	char arr2[] = "bit";
//	my_strcpy(arr1, arr2);
//	printf("%s\n", arr1);
//	return 0;
//}——4

////有关const

////原版：
//#include<stdio.h>
//int main()
//{
//	int num = 10;
//	int *p = &num;
//	*p = 20;
//	printf("%d\n", num);
//	return 0;
//}//--20


////修改1：
//#include<stdio.h>
//int main()
//{
//	const int num = 10;
//	int *p = &num;
//	*p = 20;
//	printf("%d\n", num);
//	return 0;
//}//--20

////修改2：
//#include<stdio.h>
//int main()
//{
//	const int num = 10;
//	const int *p = &num;
//	*p = 20;
//	printf("%d\n", num);
//	return 0;
//}//--出现错误，*p无法改变，导致num无法改变

////修改3：
//#include<stdio.h>
//int main()
//{
//	const int num = 10;
//	int *const p = &num;
//	//int n = 100;
//	//p = &n;            //int*const p中，p已经不可改变
//	*p = 20;
//	printf("%d\n", num);
//	return 0;
//}//--20

////总结：1.const放在指针变量的*左边时，修饰的是*p，即：不能通过p改变*p（num）的值
////      2.const放在指针变量的*右边时，修饰的是指针变量p本身，p不能被改变
////——5

////代码实现strlen(进阶)：
//
//#include<stdio.h>
//#include<assert.h>
//int my_strlen(char*arr)
//{
//	int count = 0;
//	assert(arr != NULL);  //保证指针的有效性
//	while (*arr != '\0')
//	{
//		count++;
//		arr++;
//	}
//	return count;
//}
//
//int main()
//{
//	char arr[] = "abcdef";
//	int len = my_strlen(arr);
//	printf("%d\n", len);
//	return 0;
//}
