////----2.25
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//   //整形数组
//
//	//数组名是首元素地址
//	//例外：1.sizeof(数组名)--数组名表示整个数组
//	//      2.&数组名--数组名表示整个数组
//
//	int a[] = { 1,2,3,4 };
//	printf("%d\n", sizeof(a));//sizeof(数组名)--计算数组总大小，单位字节
//	printf("%d\n", sizeof(a+0));//数组名--首元素地址
//	printf("%d\n", sizeof(*a));//数组名--首元素地址；*a为首元素
//	printf("%d\n", sizeof(a+1));//数组名--首元素地址；a+1--第二个元素地址
//	printf("%d\n", sizeof(a[1]));//第二个元素大小
//	printf("%d\n", sizeof(&a));//&a--首元素地址，但也是地址
//	printf("%d\n", sizeof(*&a));//&a--数组地址；*&a--数组地址解引用访问数组
//	printf("%d\n", sizeof(&a+1));//&a+1--虽然跳过整个数组，但仍为数组
//	printf("%d\n", sizeof(&a[0]));//首元素地址
//	printf("%d\n", sizeof(&a[0]+1));//第二个元素地址
//	printf("----------------------------------------------------\n");
//	//字符数组
//
//	char ch[] = { 'a','b','c','d','e','f' };
//
//	printf("%d\n", sizeof(ch));//sizeof(数组名)--计算数组大小，单位字节
//	printf("%d\n", sizeof(ch+0));//ch--首元素地址
//	printf("%d\n", sizeof(*ch));//ch--首元素地址；*ch--首元素
//	printf("%d\n", sizeof(ch[1]));//
//	printf("%d\n", sizeof(&ch));//&ch虽然为数组地址，但仍为地址
//	printf("%d\n", sizeof(&ch+1));//跳过整个数组后的地址
//	printf("%d\n", sizeof(&ch[0]+1));//第二个元素地址
//	printf("----------------------------------------------------\n");
//	printf("%d\n", strlen(ch));//1.--随机值
//	printf("%d\n", strlen(ch+0));//2.--与1完全相同--随机值
//	//printf("%d\n", strlen(*ch));//3.--'a'--97--error
//	//printf("%d\n", strlen(ch[1]));//4.--'b'--98--error
//	printf("%d\n", strlen(&ch));//5.--随机值
//	printf("%d\n", strlen(&ch+1));//6.--随机值--与5.相差6
//	printf("%d\n", strlen(&ch[0]+1));//7.--随机值--与1.相差1
//	printf("----------------------------------------------------\n");
//
//	return 0;
//}

////----2.26
////字符数组
//
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char arr[] = "abcdef";
//
//	printf("%d ", sizeof(arr));//sizeof(arr)--计算数组大小
//	printf("%d ", sizeof(arr+0));//arr+0--首元素地址
//	printf("%d ", sizeof(*arr));//*arr--首元素地址
//	printf("%d ", sizeof(arr[1]));//arr[1]--第二个元素
//	printf("%d ", sizeof(&arr));//&arr--数组地址,但仍为地址
//	printf("%d ", sizeof(&arr+1));//&arr+1--跳过整个数组后的地址
//	printf("%d\n", sizeof(&arr[0]+1));//&arr[0]+1--第二个元素的地址
//	printf("\n*************\n");
//	printf("\n");
//
//	printf("%d ", strlen(arr));//abcdef
//	printf("%d ", strlen(arr+0));//同上
//	//printf("%d ", strlen(*arr));//*arr--'a'-97被当作地址--error
//	//printf("%d ", strlen(arr[1]));//arr[1]--'b'-98被当作地址--error
//	printf("%d ", strlen(&arr));//&arr--数组地址，数组指针，char(*p)[n]=&arr
//	printf("%d ", strlen(&arr+1));
//	printf("%d\n ", strlen(&arr[0]+1));
//	printf("\n*************");
//
//	return 0;
//}——1

////字符串常量
//
//#include<stdio.h>
//int main()
//{
//	char*p = "abcdef";//p存放a的地址
//
//	printf("%d ", sizeof(p));//计算指针变量的大小
//	printf("%d ", sizeof(p+1));//p+1--b的地址
//	printf("%d ", sizeof(*p));//*p--字符串第一个字符-'a'
//	printf("%d ", sizeof(p[0]));//arr[0] == *(arr+0)  p[0] == *(p+0)
//	//printf("%d ", sizeof(&p));
//	//printf("%d ", sizeof(&p+1));
//	printf("%d\n", sizeof(&p[0]+1));//b的地址
//	printf("\n*************\n");
//	printf("\n");
//
//	printf("%d ", strlen(p));//abcdef
//	printf("%d ", strlen(p+1));//bcdef
//	//printf("%d ", strlen(*p));//*p--'a'-97被当作地址--error
//	//printf("%d ", strlen(p[0]));//p[0]--'a'-97被当作地址--error
//	printf("%d ", strlen(&p));
//	printf("%d ", strlen(&p+1));
//	printf("%d\n ", strlen(&p[0]+1));//&p[0]+1 -- b的地址
//	printf("\n*************");
//
//	return 0;
//}——2

//二维数组

#include<stdio.h>
int main()
{
	int a[3][4] = { 0 };

	printf("%d ", sizeof(a));
	printf("%d ", sizeof(a[0][0]));
	printf("%d ", sizeof(a[0]));
	printf("%d ", sizeof(a[0]+1));
	printf("%d ", sizeof(*(a[0]+1)));
	printf("%d ", sizeof(a+1));
	printf("%d ", sizeof(*(a+1)));
	printf("%d ", sizeof((&a[0]+1)));
	printf("%d ", sizeof(*(&a[0] + 1)));
	printf("%d ", sizeof(*a));
	printf("%d/n", sizeof(a[3]));
	printf("\n*********************\n")

	return 0;
}——3

////----2.27
////字符数组
//
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char arr[] = "abcdef";
//
//	printf("%d ", sizeof(arr));//sizeof(arr)--计算数组大小
//	printf("%d ", sizeof(arr+0));//arr+0--首元素地址
//	printf("%d ", sizeof(*arr));//*arr--首元素地址
//	printf("%d ", sizeof(arr[1]));//arr[1]--第二个元素
//	printf("%d ", sizeof(&arr));//&arr--数组地址,但仍为地址
//	printf("%d ", sizeof(&arr+1));//&arr+1--跳过整个数组后的地址
//	printf("%d\n", sizeof(&arr[0]+1));//&arr[0]+1--第二个元素的地址
//	printf("\n*************\n");
//	printf("\n");
//
//	printf("%d ", strlen(arr));//abcdef
//	printf("%d ", strlen(arr+0));//同上
//	//printf("%d ", strlen(*arr));//*arr--'a'-97被当作地址--error
//	//printf("%d ", strlen(arr[1]));//arr[1]--'b'-98被当作地址--error
//	printf("%d ", strlen(&arr));//&arr--数组地址，数组指针，char(*p)[n]=&arr
//	printf("%d ", strlen(&arr+1));
//	printf("%d\n ", strlen(&arr[0]+1));
//	printf("\n*************");
//
//	return 0;
//}——1

////字符串常量
//
//#include<stdio.h>
//int main()
//{
//	char*p = "abcdef";//p存放a的地址
//
//	printf("%d ", sizeof(p));//计算指针变量的大小
//	printf("%d ", sizeof(p+1));//p+1--b的地址
//	printf("%d ", sizeof(*p));//*p--字符串第一个字符-'a'
//	printf("%d ", sizeof(p[0]));//arr[0] == *(arr+0)  p[0] == *(p+0)
//	//printf("%d ", sizeof(&p));
//	//printf("%d ", sizeof(&p+1));
//	printf("%d\n", sizeof(&p[0]+1));//b的地址
//	printf("\n*************\n");
//	printf("\n");
//
//	printf("%d ", strlen(p));//abcdef
//	printf("%d ", strlen(p+1));//bcdef
//	//printf("%d ", strlen(*p));//*p--'a'-97被当作地址--error
//	//printf("%d ", strlen(p[0]));//p[0]--'a'-97被当作地址--error
//	printf("%d ", strlen(&p));
//	printf("%d ", strlen(&p+1));
//	printf("%d\n ", strlen(&p[0]+1));//&p[0]+1 -- b的地址
//	printf("\n*************");
//
//	return 0;
//}——2

//二维数组
//
//#include<stdio.h>
//int main()
//{
//	int a[3][4] = { 0 };
//
//	printf("%d ", sizeof(a));//3*4*4
//	printf("%d ", sizeof(a[0][0]));//第一行第一个数字
//	printf("%d ", sizeof(a[0]));//可以理解为一维数组，一共三个元素；a[0]相当于第一行作为一维数组的数组名，sizeof(数组名)计算数组大小
//	printf("%d ", sizeof(a[0]+1));//a[0]是第一行数组名，数组名此时为首元素地址，a[0]即为第一行第一个元素的地址，则a[0]+1为第一行第二个元素地址
//	printf("%d ", sizeof(*(a[0]+1)));//第一行第二个元素
//	printf("%d ", sizeof(a+1));//第二行数组地址，a是二维数组数组名，a没有sizeof(a),也没有sizeof(&a),所以a为首元素地址，二维数组首元素看作第一行（二维数组看作一维数组），a为第一行地址
//	printf("%d ", sizeof(*(a+1)));//计算第二行大小
//	printf("%d ", sizeof((&a[0]+1)));//第二行地址
//	printf("%d ", sizeof(*(&a[0] + 1)));//第二行大小
//	printf("%d ", sizeof(*a));//a为首元素地址-第一行地址，*a-第一行
//	printf("%d/n", sizeof(a[3]));//a[3]--第四行数组名，sizeof(a[3])内部不参与真实运算，根据类型计算-4个整形
//	printf("\n*********************\n")
//
//	return 0;
//}——3

////指针笔试题 1：
//
//#include<stdio.h>
//int main()
//{
//	int a[5] = { 1,2,3,4,5 };
//	int*ptr = (int*)(&a + 1);//&a+1--数组指针类型，强制类型转化为整形指针
//	printf("%d,%d\n", *(a + 1), *(ptr - 1));
//	return 0;
//}——4

////指针笔试题 2：
//
//#include<stdio.h>
//struct Test
//{
//	int num;
//	char*pcName;
//	short sDate;
//	char cha[2];
//	short sBa[4];
//}*p;
////假设：p为0x100000，下列表达式的值
////已知：结构体Test类型变量大小为20个字节
//int main()
//{
//	printf("%p\n", p + 0x1);//结构体Test变量20个字节，0x100000+20->0x100014
//	printf("%p\n", (unsigned long)p + 0x1);//强制类型转化为无符号长整形，普通+1，0x100001
//	printf("%p\n", (unsigned int*)p + 0x1);//强制类型转化为无符号整形指针，+1--跳过4个字节,0x100004
//	return 0;
//}——5

////指针笔试题 3：
//
//#include<stdio.h>
//int main()
//{
//	int a[4] = { 1,2,3,4 };
//	int*ptr1 = (int*)(&a + 1);//4
//	int*ptr2 = (int*)((int)a + 1);//2000000
//	printf("%x,%x", ptr1[-1], *ptr2);//ptr2[-1]==*(ptr+(-1))== *(ptr-1)
//	return 0;
//}——6

////指针笔试题 4：
//
//#include<stdio.h>
//int main()
//{
//	int a[3][2] = { (0,1),(2,3),(4,5) };//存在逗号表达式，则{1，3，5}；
//	int*p;
//	p = a[0];//a[0]--首元素地址--1的地址
//	printf("%d\n", p[0]);
//	return 0;
//}——7

////指针笔试题 5：
//
//#include<stdio.h>
//int main()
//{
//	int a[5][5];
//	int(*p)[4];//p--数组指针，存4个元素，元素类型为int类型
//	p = a;
//	printf("%p,%d\n", &p[4][2] - &a[4][2], &p[4][2] - &a[4][2]);
//	return 0;
//}——8
