////代码实现：判断机器字节序（大端存储/小端存储）
//
////原版：
//#include<stdio.h>
//int main()
//{
//	int a = 1;
//	char*p = (char*)&a;
//	if (*p == 1)
//	{
//		printf("小端\n");
//	}
//	else
//	{
//		printf("大端\n");
//	}
//	return 0;
//}
//
////优化1：
//#include<stdio.h>
//int check_sys()
//{
//	int a = 1;
//	char*p = (char*)&a;
//	if (*p == 1)
//		return 1;
//	else
//		return 0;
//}
//
//int main()
//{
//	int ret = check_sys();//返回1，小端；返回0，大端
//	if (ret == 1)
//	{
//		printf("小端\n");
//	}
//	else
//	{
//		printf("大端\n");
//	}
//	return 0;
//}

////优化2：
//#include<stdio.h>
//int check_sys()
//{
//	int a = 1;
//	char*p = (char*)&a;
//	return*p;
//}
//
//int main()
//{
//	int ret = check_sys();//返回1，小端；返回0，大端
//	if (ret == 1)
//	{
//		printf("小端\n");
//	}
//	else
//	{
//		printf("大端\n");
//	}
//	return 0;
//}

////优化3：
//#include<stdio.h>
//int check_sys()
//{
//	int a = 1;
//	return(*(char*)&a);
//}
//
//int main()
//{
//	int ret = check_sys();//返回1，小端；返回0，大端
//	if (ret == 1)
//	{
//		printf("小端\n");
//	}
//	else
//	{
//		printf("大端\n");
//	}
//	return 0;
//}——1

////输出什么 1
//#include<stdio.h>
//int main()
//{
//	char a = -1;            //-1
//	//原码：10000000000000000000000000000001
//	//反码：11111111111111111111111111111110
//	//补码：11111111111111111111111111111111（内存所存）
//	//char类型：11111111
//	signed char b = -1;     //-1
//	unsigned char c = -1;   //255
//	//11111111--2^8-1=256
//	printf("a=%d b=%d c=%d\n", a, b, c);
//	//打印整形：-->整型提升
//	//a:-->11111111111111111111111111111111
//	//b:-->11111111111111111111111111111111
//	//c:-->00000000000000000000000011111111
//	return 0;
//}——2

////输出什么：2
//#include<stdio.h>
//int main()
//{
//	char a = -128;
//	//原码：1000000000000000000000000000000010000000
//	//反码：1111111111111111111111111111111101111111
//	//补码：1111111111111111111111111111111110000000
//	//截断，char:-->10000000
//	//整型提升：a补码：-->11111111111111111111111110000000
//	
//	//%d--打印十进制有符号数字
//	//%u--打印十进制无符号数字
//	//a原码：-->11111111111111111111111110000000
//	printf("%u\n", a);//4294967168   若a=128，答案相同，因为不存在128，128=127+1-->-128
//	return 0;
//}——3

////按补码形式运算，最后格式化成有符号整数
//#include<stdio.h>
//int main()
//{
//	int i = -20;
//	//原码：-->10000000000000000000000000010100
//	//反码：-->11111111111111111111111111101011
//	//补码：-->11111111111111111111111111101100
//	unsigned int j = 10;
//	//原码=反码=补码：-->00000000000000000000000000001010
//
//	//相加：
//	//补码：-->11111111111111111111111111110110
//	//反码：-->11111111111111111111111111110101
//	//原码：-->10000000000000000000000000001010 --> -10
//
//	printf("%d\n", i + j);//  -10
//	return 0;
//}——4

////输出什么：
//#include<stdio.h>
//int main()
//{
//	unsigned int i = 0;
//	//负数被全部强制转换为无符号类型
//	for (i = 9; i >= 0; i++)
//	{
//		printf("%u\n", i);
//	}
//	return 0;
//}——5

////输出什么：
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char a[1000];
//	//char类型：-128--127
//	int i;
//	for (i = 0; i < 1000; i++)
//	{
//		a[i] = -1 - i;
//	}
//	//-1，-2，-3…… -128，-129…… -1000
//	//由于char类型的数的范围：-128--127
//	//-1，-2，-3…… -128，-127…… -3，-2，-1，0，(‘\0’停止) 1 ……
//	printf("%d\n", strlen(a));
//	return 0;
//}——6

////输出什么
//#include<stdio.h>
//unsigned char i = 0;
//int main()
//{
//	//char:> i=255：11111111
//	//i++:>256 ( 1 00000000 )-->0
//	for (i = 0; i <= 255; i++)
//	{
//		printf("hello world\n");
//	}
//	//hello world 死循环
//	return 0;
//}——7

////float与int在存储中存储的形式不同
//#include<stdio.h>
//int main()
//{
//	int n = 9;
//	float*pFloat = (float*)&n;
//	printf("n的值为:%d\n", n);            //--9
//	printf("*pFloat的值为:%f\n", *pFloat);//--0.000000
//
//	*pFloat = 9.0;
//	printf("n的值为:%d\n", n);            //1091567616
//	printf("*pFloat的值为:%f\n", *pFloat);//9.000000
//	return 0;
//}——8
