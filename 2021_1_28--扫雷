*****1.头文件--game.h
   #pragma once
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define ROW 9
#define COL 9
#define ROWS ROW+2
#define COLS COL+2
#define EASY_COUNT 80
//初始化界面
void InitBoard(char board[ROWS][COLS], int rows, int cols, char set);
//打印棋盘
void DisplayBoard(char board[ROWS][COLS], int row, int col);
//布置雷
void SetMine(char board[ROWS][COLS], int row, int col);
//扫雷
void FindMine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col);
//找雷个数
int get_mine_count(char mine[ROWS][COLS], int x, int y);
*****2.源文件--game.c
   #include"game.h"
void InitBoard(char board[ROWS][COLS], int rows, int cols, char set)
{
	int i = 0;
	int j = 0;
	for (i = 1; i <= rows; i++)
	{
		for (j = 1; j <= cols; j++)
		{
			board[i][j] = set;
		}
	}
}
void DisplayBoard(char board[ROWS][COLS], int row, int col)
{
	int i = 0; 
	int j = 0;
	//打印列号
	for (i = 0; i <= col; i++)
	{
		printf("%d ", i);
	}
	printf("\n");
	for (i = 1; i <= row; i++)
	{
		printf("%d ", i);
		for (j = 1; j <= col; j++)
		{
			printf("%c ", board[i][j]);
		}
		printf("\n");
	}
}
void SetMine(char board[ROWS][COLS], int row, int col)
{
	int count = EASY_COUNT;
	while (count)
	{
		int x = rand() % row + 1;//电脑随机生成横坐标
		int y = rand() % col + 1;//电脑随机生成纵坐标
		if (board[x][y] == '0')
		{
			board[x][y] = '1';
			count--;
		}
	}
}
//判断雷的个数
int get_mine_count(char mine[ROWS][COLS], int x, int y)
{
	return
		mine[x - 1][y] +
		mine[x - 1][y - 1] +
		mine[x][y - 1] +
		mine[x + 1][y - 1] +
		mine[x + 1][y] +
		mine[x + 1][y + 1] +
		mine[x][y + 1] +
		mine[x - 1][y + 1] - 8 * '0';   // '3'-'0'=3
}
void FindMine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col)
{
	int x = 0;
	int y = 0;
	int win = 0;
	while (win < row*col - EASY_COUNT)
	{
		printf("请输入要排查雷的坐标:>");
		scanf_s("%d%d", &x, &y);
		//判断坐标输入是否正确
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
		    //坐标合法
			//1.踩雷
			if (mine[x][y] == '1')
			{
				printf("很遗憾，你被炸死了\n");
				DisplayBoard(mine, row, col);
				break;
			}
			else  //不是雷
			{
			    //计算x,y周围几个雷
				int count = get_mine_count(mine, row, col);
				win++;
			}
		}
		else
		{
			printf("输入坐标非法，请重新输入:>");
		}
	}
	if (win == row * col - EASY_COUNT)
	{
		printf("恭喜你，扫雷成功\n");
		DisplayBoard(mine, row, col);
	}
}
*****3.源文件--test.c
   #include"game.h"
void menu()
{
	printf("********************************\n");
	printf("****  1. play      0. exit  ****\n");
	printf("********************************\n");
}
void game()
{
    //雷的信息储存
	//1.布置好的雷的信息
	char mine[ROWS][COLS] = { 0 };  //11*11
	//2.排查出的雷的信息
	char show[ROWS][COLS] = { 0 };
	//初始化
	InitBoard(mine, ROWS, COLS, '0');
	InitBoard(show, ROWS, COLS, '*');
	//打印棋盘
	//DisplayBoard(mine,ROW,COL);
	DisplayBoard(show, ROW, COL);
	//布置雷
	SetMine(mine, ROW, COL);
	DisplayBoard(mine, ROW, COL);
	//扫雷
	FindMine(mine,show, ROW, COL);
}
void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择:>");
		scanf_s("%d", &input);
		switch (input)
		{
		    case 1:
			    game();
			    break;
		    case 0:
				printf("退出游戏\n");
				break;
			default:
				printf("选择错误，请重新选择:>\n");
				break;
		}
	} while (input);
}
int main()
{
	test();
	return 0;
}
