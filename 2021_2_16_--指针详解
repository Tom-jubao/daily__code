//----2.16
//#include<stdio.h>
//void test(int arr[])
//{
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//arr--首元素地址--4个字节
//	printf("%d\n", sz);
//  //32位--1
//  //64位--2
//}
//
//int main()
//{
//	int arr[10] = { 0 };
//	test(arr);
//	return 0;
//}——1

//#include<stdio.h>
//int main()
//{
//	char arr[] = "abcdef";
//	char*pc = arr;
//	printf("%s\n", arr);//abcdef
//	printf("%s\n", pc);//abcdef
//	return 0;
//}——2

//#include<stdio.h>
//int main()
//{
//	char*p = "abcdef";
//	//p--首字符地址
//	//"abcdef"是一个常量字符串，不可修改，则若*p='W',系统出错，无法改变
//	printf("%c\n", *p);//a
//	printf("%s\n", p);//abcdef
//	return 0;
//}——3

////一道面试题
////情景一：
//#include<stdio.h>
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "abcdef";
//	//arr1与arr2两个数组所存地址不同，首字母地址也各不相同
//
//	/*(const)*/char*p1 = "abcdef";//常量字符串
//	/*(const)*/char*p2 = "abcdef";//常量字符串
//	           //对p1,p2来说，"abcdef"为常量字符串，则只存一份，故p1,p2均指向首字母地址
//	if (arr1==arr2)
//	{
//		printf("hehe\n");
//	}
//	else
//	{
//		printf("haha\n");
//	}
//	return 0;
//	//由于arr1，arr2首字母地址不同，输出 --> haha
//}

////情景二：
//#include<stdio.h>
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "abcdef";
//	//arr1与arr2两个数组所存地址不同，首字母地址也各不相同
//
//	/*(const)*/char*p1 = "abcdef";//常量字符串
//	/*(const)*/char*p2 = "abcdef";//常量字符串
//	           //对p1,p2来说，"abcdef"为常量字符串，则只存一份，故p1,p2均指向首字母地址
//	if (p1==p2)
//	{
//		printf("hehe\n");
//	}
//	else
//	{
//		printf("haha\n");
//	}
//	return 0;
//	//由于p1,p2指向同一个常量字符串，故首地址相同。输出 --> hehe
//}——4

////指针数组是数组，用来存指针
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 0 };//整型数组
//	char ch[5] = { 0 };//字符数组
//	int*parr[4];//存放整形指针的数组--指针数组
//	char*pch[5];//存放字符指针的数组--指针数组
//}——5

//#include<stdio.h>
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = 30;
//	int d = 40;
//	int*arr[4] = { &a,&b,&c,&d };//指针数组存指针
//	//监视 &a,&b,&c,&d 与 arr ，查看内存地址情况
//	return 0;
//}——6

//#include<stdio.h>
//int main()
//{
//	int arr1[] = { 1,2,3,4,5 };
//	int arr2[] = { 2,3,4,5,6 };
//	int arr3[] = { 3,4,5,6,7 };
//	int*parr[] = { arr1,arr2,arr3 };
//
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 5; j++)
//		{
//			printf("%d ", *(parr[i] + j));
//		}
//		printf("\n");
//	}
//	return 0;
//}———7

////----2.17

////数组指针
//
//#include<stdio.h>
//int main()
//{
//	int*p = NULL;  // p是整形指针--指向整型的指针--可以存放整形的地址
//	char*pc = NULL;//pc是字符指针--指向字符的指针--可以存放字符的地址
//	               //    数组指针--指向数组的指针--可以存放数组的地址
//
//	int arr[10] = { 0 };
//	//arr--首元素地址
//	//&arr[0]--首元素地址
//	//&arr--数组地址
//
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int(*p)[10] = &arr;//数组指针存起来；[] 优先级 > *
//
//	char*arr[5];
//	char*(*pa)[5] = &arr;
//	//char*--pa指向的数组元素类型
//	//pa--指针变量名
//	//*pa的*--说明pa为指针
//}——1

////&arr与arr不同
////&arr--数组地址
////arr--数组首元素地址
//#include<stdio.h>
//int main()
//{
//	int arr[2];
//	printf("arr的地址:>%p\n", arr);
//	printf("arr+1的地址:>%p\n", arr + 1);
//	//二者相差 4
//
//	printf("&arr的地址:>%p\n", &arr);
//	printf("&arr+1的地址:>%p\n", &arr + 1);
//	//二者相差 4*2=8
//
//	return 0;
//}——2

////数组指针低端用法
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int(*pa)[10] = &arr;
//	int i;
//	//输出arr数组内容
//	for (i = 0; i < 10; i++)
//	{
//		//输出法一：
//		printf("%d ", *(*pa + i));
//		//输出法二：
//		printf("%d ",(*pa)[i]);
//	}
//	printf("\n");
//	return 0;
//}
//
////上面用数组指针由于啰嗦,不如接下来方便
//
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int *p = arr;
//	int i;
//	for (i = 0; i < 10; i++)
//	{
//		//直接输出
//		printf("%d ", arr[i]);
//		//指针输出
//		printf("%d ", *(p + i));
//	}
//	printf("\n");
//	return 0;
//}——3

//输出二维数组
#include<stdio.h>

////法一：基本操作
//void print1(int arr[3][5],int x,int y)
//{
//	int i,j;
//	for (i = 0; i < x; i++)
//	{
//		for (j = 0; j < y; j++)
//		{
//			printf("%d ", arr[i][j]);
//		}
//		printf("\n");
//	}
//}

////法二：数组指针
////第一种：
//void print2(int(*p)[5], int x, int y)
//{
//	int i;
//	for (i = 0; i < x; i++)
//	{
//		int j;
//		for (j = 0; j < y; j++)
//		{
//			printf("%d ", (*(p + i))[j]);//*p--第一行
//		}
//		printf("\n");
//	}
//}
//
////第二种
//void print2(int(*p)[5], int x, int y)
//{
//	int i;
//	for (i = 0; i < x; i++)
//	{
//		int j;
//		for (j = 0; j < y; j++)
//		{
//			printf("%d ", *(*(p + i))+j);//*(p+i)--第几行
//		}
//		printf("\n");
//	}
//}
//
////第三种
//void print2(int(*p)[5], int x, int y)
//{
//	int i;
//	for (i = 0; i < x; i++)
//	{
//		int j;
//		for (j = 0; j < y; j++)
//		{
//			printf("%d ", p[i][j]);
//		}
//		printf("\n");
//	}
//}
//
//int main()
//{
//	int arr[3][5] = { {1,2,3,4,5},{2,3,4,5,6},{3,4,5,6,7} };
//	//print1(arr, 3, 5);
//	print2(arr, 3, 5);
//	printf("\n");
//	return 0;
//}——4

////一维数组输出
//int arr[10] = { 1,2,3,45,6,7,8,9,10 };
//int i = 0;
//printf("%d ", arr[i];)
//printf("%d "*(p + i));
//printf("%d ", *(arr + i));
//printf("%d ", p[i]);
////二维数组输出
//int arr[3][5] = { {1,2,3,4,5}, {2,3,4,5,6}, {3,4,5,6,7} };
//int i = 0;
//int j = 0;
//printf("%d ", arr[i][j]);
//printf("%d ", (*(p + i) + j));
//printf("%d ", (*(p + i))[j]);
//printf("%d ", p[i][j]);
////——5

////----2.19

////一维数组传参
//void test(int arr[]); 
//{};
//void test(int arr[10]); //arr[10]中的10可以为别的数字，但防止被人误解，尽量写对
//{};
//void test(int* arr); 
//{};
//
//void test2(int* arr[] );
//{};
//void test2(int*arr[20]);
//{};
//void test2(int**arr);
//{};
//
//int main()
//{
//	int arr[10] = { 0 };
//	int*arr2[20] = { 0 };
//	test(arr);
//	test2(arr2);
//	return 0;
//}

//////二维数组传参
//void test(int arr[3][5])
//{};
//void test(int arr[][5]) 
//{};
//void test(int(*arr)[5])
//{};
////——1

////一级指针传参
//void test1(int*p)
//{};
//void test2(char*pc)
//{};
//
//int main()
//{
//	int a = 10;
//	int*p = &a;
//	test1(&a);
//	test1(p);
//
//	char b = 'W';
//	char*pc = &b;
//	test2(&b);
//	test2(pc);
//
//	return 0;
//}——2

////二级指针传参
//void test(int**p)
//{};
//
//int main()
//{
//	int*ptr;
//	int**p = &ptr;
//	
//	test(&ptr);
//	test(pp);
//
//	int*arr[10];//arr为数组，有10个元素，为int*类型
//	test(arr);//指针数组也可以，arr为首元素地址
//
//	return 0;
//}——3

////函数指针--指向函数的指针
//#include<stdio.h>
//int Add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	printf("%d\n", Add(a, b));
//
//	printf("%p\n", Add);
//	printf("%p\n", &Add);
//	//二者相同，函数名 与 &函数名 都是函数地址
//
//	return 0;
//}——4

////函数指针
//#include<stdio.h>
//void print(char*str)
//{
//	printf("%s\n", str);
//}
//
//int main()
//{
//	void(*p)(char*) = print;
//	(*p)("hello 帅哥!");
//	return 0;
//}——5

////----2.20

////代码一：
//( * ( void (* ) () ) 0)();
////void(*)()--函数指针类型
////（...）0 --把0强制转换成：void(*)()函数指针类型
////         --0是一个函数地址
////（*（...）0）（）--调用0地址处的该函数
//
////代码二：
//void(*signal(int, void(*)(int)))(int)
////void(* )()--函数指针类型
////signal( int,void(* )() )--signal函数名；int,void(* )()函数参数；void(* )()函数指针
//
////简化
////例：typedef unsigned int uint
//
////typedef void(* )() pfun_t--错误
////typedef void(* pun_t)()  --正确
////typedef signal(int,typedef)
//
////解释
////signal---一个函数声明
////signal函数有两个参数，第一个是int，第二个是函数指针，该函数指针指向的函数的参数为int,返回类型为void
////signal函数的返回类型也为函数指针：该函数指针指向的参数为int，返回类型为void
////——1

//#include<stdio.h>
//int Add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int(*p)(int, int) = Add;
//	printf("%d\n", Add(2, 3));
//	printf("%d\n", p(2, 3));
//	printf("%d\n", (*p)(2, 3));
//	//printf("%d\n",*p(2,3))--错误
//	//printf("%d\n",(n个* p)(2,3));
//	return 0;
//}——2

////函数指针数组
//#include<stdio.h>
//int Add(int x, int y)//加法函数
//{
//	return x + y;
//}
//int Sub(int x, int y)//减法函数
//{
//	return x - y;
//}
//int Mul(int x, int y)//乘法函数
//{
//	return x * y;
//}
//int Div(int x, int y)//除法函数
//{
//	return x / y;
//}
//
//int main()
//{
//	int(*parr[4])(int, int) = { Add,Sub,Mul,Div };//函数指针数组
//	int i = 0;
//	for (i = 0; i < 4; i++)
//	{
//		printf("%d\n", parr[i](2, 3));
//	}
//	return 0;
//}——3

////函数指针数组
//int(*parr1[10])();
//
////int*parr2[10](); --错
////int(*)()parr3[];--错
//
//char*my_strcpy(char*dest,const char*src)
////1.写一个函数指针pf，能指向my_strcpy
////2.写一个函数指针数组pfArr，能存放4个my_strcpy函数的地址
//
//char*(*pf)(char*,const char*)
//char*(*pfArr[4])(char*,const char*)
////——4

////----2.21
//函数指针数组的用途：转移表
//例子：计算器

#include<stdio.h>
//菜单栏
void menu()
{
	printf("*************************\n");
	printf("***  1.Add    2.Sub  ****\n");
	printf("***  3.Mul    4.Div  ****\n");
	printf("***  5.Xor    0.exit ****\n");
	printf("*************************\n");
}

//计算器各项内容
//1.加法
int Add(int x, int y)
{
	return x + y;
}
//2.减法
int Sub(int x, int y)
{
	return x - y;
}
//3.乘法
int Mul(int x, int y)
{
	return x * y;
}
//4.除法
int Div(int x, int y)
{
	return x / y;
}
//5.异或
int Xor(int x, int y)
{
	return x ^ y;
}

////初级阶段
//int main()
//{
//	int input = 0;
//	int x = 0, y = 0;
//	do
//	{
//		menu();
//		printf("请输入:>");
//		scanf_s("%d", &input);
//		switch (input)
//		{
//		   case 1:
//			  printf("请输入两个操作数:>");
//			  scanf_s("%d%d", &x, &y);
//			  printf("结果:>%d\n",  Add(x, y));
//			  break;
//		   case 2:
//			   printf("请输入两个操作数:>");
//			   scanf_s("%d%d", &x, &y);
//			   printf("结果:>%d\n",  Sub(x, y));
//			   break;
//		   case 3:
//			   printf("请输入两个操作数:>");
//			   scanf_s("%d%d", &x, &y);
//			   printf("结果:>%d\n",  Mul(x, y));
//			   break;
//		   case 4:
//			   printf("请输入两个操作数:>");
//			   scanf_s("%d%d", &x, &y);
//			   printf("结果:>%d\n", Div(x, y));
//			   break;
//		   case 5:
//			   printf("请输入两个操作数:>");
//			   scanf_s("%d%d", &x, &y);
//			   printf("结果:>%d\n",  Xor(x, y));
//			   break;
//		   case 0:
//			   printf("退出\n");
//			   break;
//		   default:
//			   printf("选择错误\n");
//			   break;
//		}
//	} while (input);
//	return 0;
//}

////小进阶阶段--回调函数
//void Calc(int(*pfArr)(int, int))
//{
//	int x = 0;
//	int y = 0;
//	printf("请输入两个操作数:>");
//	scanf_s("%d%d", &x, &y);
//	printf("结果:>%d\n", pfArr(x, y));
//}
//int main()
//{
//	int input = 0;
//	do
//	{
//		menu();
//		printf("请选择:>");
//		scanf_s("%d", &input);
//		switch (input)
//		{
//		    case 1:
//				Calc(Add);
//				break;
//			case 2:
//				Calc(Sub);
//				break;
//			case 3:
//				Calc(Mul);
//				break;
//			case 4:
//				Calc(Div);
//				break;
//			case 5:
//				Calc(Xor);
//				break;
//			case 0:
//				printf("退出\n");
//				break;
//			default:
//				printf("请重新选择:>");
//				break;
//		}
//		
//	}while (input);
//	return 0;
//}

////进阶阶段--函数指针数组
//int main()
//{
//	int input = 0;
//	int x = 0;
//	int y = 0;
//	int(*pfArr[])(int, int) = { 0,Add,Sub,Mul,Div,Xor };
//	do
//	{
//		menu();
//		printf("请选择:>");
//		scanf_s("%d", &input);
//		if (input >= 1 && input <= 5)
//		{
//			printf("请输入两个操作数:>");
//			scanf_s("%d%d", &x, &y);
//			int ret = pfArr[input](x, y);
//			printf("结果:>%d\n", ret);
//		}
//		else if (input == 0)
//		{
//			printf("退出\n");
//		}
//		else
//		{
//			printf("请重新选择:>");
//		}
//	} while (input);
//	return 0;
//}——1

////--\0是否记录长度
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) % sizeof(arr[0]);
//	
//	char ch[] = "abcdef";
//	int ret = sizeof(ch) % sizeof(ch[0]);
//
//	printf("sz:>%d\n", sz);  //--0
//	printf("ret:>%d\n", ret);//--0
//    //均不记录
//}——2

////回调函数
//
////小练
//#include<stdio.h>
//void print(char*str)
//{
//	printf("hehe %s", str);
//}

//void test(void(*p)(char*))
//{
//	printf("test\n");
//	p("帅哥!");
//}

//int main()
//{
//	test(print);
//	return 0;
//}——3
