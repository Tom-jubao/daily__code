////冒泡法排序(从大到小)
//#include<stdio.h>
//int main()
//{
//	int i = 0;
//	int j = 0;
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	for (i = 0; i < 10-1; i++)
//	{
//		for (j = 0; j < 10 - 1 - i; j++)
//		{
//			if (arr[j] < arr[j + 1])
//			{
//				int temp = arr[j];
//				arr[j] = arr[j + 1];
//				arr[j + 1] = temp;
//			}
//		}
//	}
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}——1

////实现函数Init()初始化数组为全0
////实现函数print()打印函数的每个元素
////实现函数reverse()完成数组元素的逆置
//#include<stdio.h>
//void Init(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		arr[i] = 0;
//	}
//}
//void Print(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ",arr[i]);
//	}
//	printf("\n");
//}
//void Reverse(int arr[], int sz)
//{
//	int left = 0;
//	int right = sz - 1;
//	while (left < right)
//	{
//		int temp = arr[left];
//		arr[left] = arr[right];
//		arr[right] = temp;
//		left++;
//		right--;
//	}
//}
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//Init(arr, sz);
//	Print(arr, sz);
//	Reverse(arr, sz);
//	Print(arr, sz);
//	return 0;
//}——2

//#include<stdio.h>
//int main()
//{
//	int arr[] = { 1,2,3,4,5 };//int为4个字节
//	short*p = (short*)arr;//short为2个字节
//	int i;
//	for (i = 0; i < 4; i++)
//	{
//		*(p + i) = 0;
//	}
//	for (i = 0; i < 5; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	printf("\n");
//	return 0;
//}——3

//#include<stdio.h>
//int main()
//{
//	int a = 0x11223344;//内存块中排列--44332211
//	char*pc = (char*)&a;//char为1个字节
//	*pc = 0;
//	printf("%x\n", a);
//	return 0;
//}——4

//#include<stdio.h>
//int i ;//全局变量--不初始化，默认为0
//int main()
//{
//	i--;
//	//-1
//	//10000000000000000000000000000001--原码
//	//11111111111111111111111111111110--反码
//	//11111111111111111111111111111111--补码
//	if (i > sizeof(i))//sizeof()计算变量/类型所占内存大小，应>=0,若i与sizeof(i)比大小，则i应化为无符号数
//	{                                                                //11111111111111111111111111111111--原码
//		printf(">\n");                                               //11111111111111111111111111111111--补码
//	}
//	else
//	{
//		printf("<\n");
//	}
//	return 0;
//}——5
